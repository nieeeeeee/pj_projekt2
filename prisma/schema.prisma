generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rental {
  id          Int           @id @default(autoincrement())
  price       Decimal?      @db.Decimal(10, 2)
  rent        Decimal?      @db.Decimal(10, 2)
  title       String?       @db.VarChar(511)
  location    String?       @db.VarChar(511)
  rooms       Int?
  meterage    Int?
  description String?
  images      RentalImage[] @relation("RentalToImages")

  rentalBookings RentalBooking[]

  @@map("rentals")
}

model RentalImage {
  id       Int     @id @default(autoincrement())
  rentalId Int?    @map("rental_id")
  image    String?
  rental   Rental? @relation("RentalToImages", fields: [rentalId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("rental_images")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?   @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  password      String    @db.VarChar(255)
  emailVerified DateTime? @db.Timestamptz(6)
  image         String?

  accounts Account[]
  sessions Session[]

  rentalBookings RentalBooking[]

  @@map("users")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @unique @db.VarChar(255)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  id_token          String? @db.Text
  scope             String? @db.Text
  session_state     String? @db.Text
  token_type        String? @db.VarChar(255)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  expires    DateTime @db.Timestamptz(6)
  token      String   @unique

  @@id([identifier, token])
  @@map("verification_token")
}

model RentalBooking {
  id        Int      @id @default(autoincrement())
  rentalId  Int
  userId    Int
  startDate DateTime
  endDate   DateTime

  rental Rental @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rental_bookings")
}
